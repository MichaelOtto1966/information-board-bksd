"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const moment_1 = __importDefault(require("moment"));
class Function {
    constructor() {
        this.optionsHandleError = (options) => {
            if (!options)
                throw new Error('options not found');
            this.rssHandleError(options);
            this.numberPropertiesHandleError(options, ['page', 'limit', 'contentLength']);
            this.stringPropertiesHandleError(options, ['search', 'category', 'locale']);
        };
        this.rssHandleError = (options) => {
            if (!Object.keys(options).includes('rss'))
                throw new Error('rss options property is necesary');
            if (!Array.isArray(options.rss))
                throw new Error('bad request. rss options property has to be array');
            options.rss.forEach((rss) => {
                if (!Object.keys(rss).includes('url'))
                    throw new Error('bad request. some of you rss has no url property');
            });
        };
        this.numberPropertiesHandleError = (options, fields) => {
            fields.forEach(property => {
                if (options[property] && typeof options[property] !== 'number')
                    throw new Error(`${property} options property has to be number`);
            });
        };
        this.stringPropertiesHandleError = (options, fields) => {
            fields.forEach(property => {
                if (options[property] && typeof options[property] !== 'string')
                    throw new Error(`${property} options property has to be string`);
            });
        };
        this.thumbnailMapper = (food) => {
            let thumbnail = {};
            if (food.hasOwnProperty('enclosure')) {
                thumbnail = {
                    url: food.enclosure.url || '',
                    type: food.enclosure.type || '',
                };
            }
            else if (food.hasOwnProperty('media')) {
                thumbnail = {
                    url: food.media.$.url || '',
                    type: (food.media.hasOwnProperty('media:thumbnail')) ? food.media['media:thumbnail'][0].$.type : food.media.$.type || ''
                };
            }
            return thumbnail;
        };
        this.contentMapper = (food, contentLength) => (food.contentSnippet || food.content || ' ').split(' ').splice(0, contentLength).join(" ") || '';
        this.idGenerator = (str = '') => str
            .slice(0, 5)
            .split('')
            .map((char) => char.charCodeAt() + char).join('')
            .replace(/ /g, "");
    }
    feedMapper(feed, source = '', category, contentlength) {
        const mapping = feed.map((food) => ({
            author: food.author || food.creator || '',
            title: food.title,
            link: food.link,
            source,
            publishAt: new Date(food.pubDate),
            publishAtFormatted: moment_1.default(new Date(food.pubDate)).format('LLLL'),
            categories: food.categories || [],
            category,
            thumbnail: this.thumbnailMapper(food),
            content: this.contentMapper(food, contentlength),
            id: this.idGenerator(food.contentSnippet || food.content)
        }));
        return mapping.flat(Infinity);
    }
}
exports.Function = Function;
