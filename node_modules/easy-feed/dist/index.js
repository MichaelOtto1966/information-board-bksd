'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rss_parser_1 = __importDefault(require("rss-parser"));
const moment_1 = __importDefault(require("moment"));
const functions_1 = require("./functions");
let parser = new rss_parser_1.default({
    customFields: {
        item: [
            ['dc:created', 'pubDate'],
            ['media:content', 'media'],
            ['media:thumbnail', 'media']
        ]
    }
});
const functions = new functions_1.Function();
class Easy {
    constructor(options) {
        this._feed = [];
        this._locale = 'es';
        this._category = '';
        this._search = '';
        this._page = 0;
        this._limit = 50;
        this._contentLength = 40;
        functions.optionsHandleError(options);
        moment_1.default.locale(options.locale || this._locale);
        this._category = options.category || this._category;
        this._page = options.page || this._page;
        this._limit = options.limit || this._limit;
        this._contentLength = options.contentLength || this._contentLength;
        this._search = options.search || this._search;
        this._RSS = options.rss || [];
    }
    getFeed() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const rss of this._RSS) {
                let feed;
                try {
                    feed = yield parser.parseURL(rss.url);
                    (feed.items.length) ?
                        this._feed = functions.feedMapper(feed.items, rss.source, this._category, this.contentLength)
                        : console.warn(`No with ${rss.url}`);
                }
                catch (err) {
                    console.log(err);
                    console.warn(`${rss.url} not working. Check if url is correct`);
                }
            }
            return (this._search) ?
                this._feed
                    .filter((n) => n.title.toLowerCase().indexOf(this._search.toLowerCase()) > -1 || n.content.toLowerCase().indexOf(this._search.toLowerCase()) > -1)
                    .map((n) => (Object.assign(Object.assign({}, n), { query: this._search })))
                    .splice(this._page * this._limit, this._limit)
                    .sort((a, b) => b.publishAt - a.publishAt)
                : this._feed
                    .splice(this._page * this._limit, this._limit)
                    .sort((a, b) => b.publishAt - a.publishAt);
        });
    }
    set RSS(rss) {
        functions.rssHandleError({ rss });
        this._RSS = rss;
    }
    ;
    set locale(locale) {
        functions.stringPropertiesHandleError({ locale }, ['locale']);
        this._locale = locale;
    }
    ;
    set category(category) {
        functions.stringPropertiesHandleError({ category }, ['category']);
        this._category = category;
    }
    ;
    set search(search) {
        functions.stringPropertiesHandleError({ search }, ['search']);
        this._search = search;
    }
    ;
    set page(page) {
        functions.numberPropertiesHandleError({ page }, ['page']);
        this._page;
    }
    ;
    set limit(limit) {
        functions.numberPropertiesHandleError({ limit }, ['limit']);
        this._limit = limit;
    }
    ;
    set contentLength(contentLength) {
        functions.numberPropertiesHandleError({ contentLength }, ['contentLength']);
        this._contentLength = contentLength;
    }
    ;
    get RSS() {
        return this._RSS;
    }
    ;
    get locale() {
        return this._locale;
    }
    ;
    get category() {
        return this._category;
    }
    ;
    get search() {
        return this._search;
    }
    ;
    get page() {
        return this._page;
    }
    ;
    get limit() {
        return this._limit;
    }
    ;
    get contentLength() {
        return this._contentLength;
    }
    ;
}
exports.Easy = Easy;
